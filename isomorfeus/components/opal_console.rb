class OpalConsole < React::Component::Base
  WELCOME_MESSAGE = "Welcome to Opal DevTools! Type 'help' for available commands."
  HELP_TEXT = <<~TEXT
  Available commands:
  in_panel ruby_code - execute ruby_code in the Opal DevTools panel (for developing the extension)
  in_background javascript_code - execute javascript_code in the Opal DevTools background page (for developing the extension)
  inject_opal - inject Opal into current page, only works if the page does not have Opal.
  debug - toggle debugging mode for Opal DevTools, shows generated code and other things.

  Anything else is interpreted as ruby code and executed in the web page.
  TEXT

  state.count = 1
  state.debug = false
  ref :console

  def console_return
    state.count(state.count + 1) do
      ref(:console).JS[:current].JS.return()
    end
  end

  def console_log(message)
    ref(:console).JS[:current].JS.log(message)
  end

  def execute_in_panel(command)
    result = Opal::Parser.eval(command)
    console_log(result)
    console_return
  end

  def execute_in_background(command)
    "niy"
  end

  def execute_in_page(ruby_code)
    compiled_ruby_code = Opal::Compiler.new(ruby_code).compile
    compiled_ruby_code = compiled_ruby_code.lines[1..-1].join("\n") # remove /* Generated by Opal 1.0.0 */
    javascript_code = <<~JAVASCRIPT
      var opal_devtools_eval_result = #{compiled_ruby_code}

      var result;
      if (typeof opal_devtools_eval_result === 'undefined') { result = 'undefined' }
      else if (opal_devtools_eval_result === null) { result = 'null' }
      else if (typeof opal_devtools_eval_result.$inspect === 'function') {
        result = opal_devtools_eval_result.$inspect();
      } else { result = opal_devtools_eval_result }
      result;
    JAVASCRIPT
    console_log(javascript_code) if state.debug
    %x{
      chrome.devtools.inspectedWindow.eval(javascript_code, {}, function(result, exception_info) {
        #{console_log(`result`)}
        if (exception_info) {
          if (exception_info.isError) { #{console_log(`exception_info.description`)} }
          if (exception_info.isException) { #{console_log(`exception_info.value`)} }
        }
        #{console_return}
      });
    }
  end

  def inject_to_page
    "niy"
  end

  def handler(command)
    console = ref(:console).JS[:current]
    result = nil
    begin
      if command.start_with?('in_panel')
        execute_in_panel(command[8..-1])
      elsif command.start_with?('in_background')
        execute_in_background(command[13..-1])
      elsif command.start_with?('help')
        console_log(HELP_TEXT)
        console_return
      elsif command.start_with?('inject_opal')
        inject_to_page
      elsif command.start_with?('debug')
        state.debug(!state.debug) do
          console_log("debug: #{state.debug}")
          ref(:console).JS[:current].JS.return()
        end
      else
        execute_in_page(command)
      end
    rescue Exception => e
      console.JS.log(e.message)
      console_return
    end
  end

  render do
    Console(ref: ref(:console), autofocus: true, handler: proc { |c| handler(c) }, promptLabel: "#{state.count} > ", welcomeMessage: WELCOME_MESSAGE)
  end
end